plugins {
    id 'java'
    id "org.sonarqube" version "3.0"
}


def props = new Properties()
file("src/main/resources/data/files/app.properties").withInputStream { props.load(it) }

version props.getProperty("version")

group 'uca.esi.dni'

repositories {
    mavenCentral()
    google()
}

dependencies {
    // processing core library
    implementation files("libs/core.jar")

    // OKHTTP http API
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    // Google's encryption API
    implementation 'com.google.guava:guava:30.1-jre'
    // Google's AUTH2 credentials API
    implementation 'com.google.auth:google-auth-library-oauth2-http:0.24.1' 
    // email reception and sending
    // https://mvnrepository.com/artifact/com.sun.mail/jakarta.mail
    implementation group: 'com.sun.mail', name: 'jakarta.mail', version: '2.0.0'
    // email registering, checking
    // https://mvnrepository.com/artifact/org.jfree/jfreechart
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
}

task uberJar(type: Jar) {

    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    manifest.attributes("Main-Class": "uca.esi.dni.main.DniParser")
}

test {
    useJUnitPlatform()
}